# ANDES card file, 1.0

# field = elements
# an element can be a dictionary denoted with colon
# multiple elements: separate with semi-colon
# multiple lines supported

name = AVR1

doc_string = Automatic Voltage Regulator Type I, DC exciter simplified from IEEE DC1

group = AVR

data = syn: 0; busr: None; Ka: 20; Ke: 1; Kf: 1;
 Ta: 0.01; Tf: 0.1; Te: 1.0; Tr: 0.001;
 vrmax: 5; vrmin: -5; Ae: 0.0006; Be: 0.9; u: 1

descr = syn: Generator id; busr: Regulated voltage idx;
 Ka: Amplifier gain; Ke: Field circuit integral deviation; Kf: Stabilizer gain;
 Ta: Amplifier time constant; Tf: Stabilizer time constant;
 Te: Field circuit time constant; Tr: Measurement time constant;
 vrmax: Maximum regulator voltage; vrmin: minimum regulator voltage;
 Ae: 1st ceiling coefficient; Be: 2nd ceiling coefficient

params = Ka; Ke; Kf; Ta; Tf; Tr; Te; vrmax; vrmin; Ae; Be

mandatory = syn

times = Ta; Tf; Te

zeros = Ta

ctrl =
 usyn: Synchronous, u, syn, c;
 vf: Synchronous, vf, syn, y;
 vf0: Synchronous, vf0, syn, c;
 v: Synchronous, v, syn, y

algebs = vref
fnamey = v_{ref}

states = vm; vr1; vr2; vfout
fnamex = v_{m}; v_{r1}; v_{r2}; v_{fout}

interfaces = vf

service_eq = KfTf: Kf/Tf; Se: Se; u0: u * usyn; vref0: u0 *(v + vf*(Ke + Se)/Ka);

init1_eq =
vfout: u0 * vf;
vref: u0 * vref0;
vm: u0 * v;
vr1: u0 * vf*(Ke + Se)
vr2: (-vf * KfTf) * u0;

algeb_eq =
 u0 * (vref0 -vref);
 u0 * (-vfout + vf0)

diff_eq =
 u0 * (v - vm) / Tr;
 u0 * (Ka * (vref - vm - vr2 - KfTf*vfout));
 u0 * (- (KfTf * vfout + vr2) / Tf);
 u0 * (- (vfout * (Ke + Se) - vr1) / Te)

anti_windup = vr1: Ta, vrmin, vrmax

# Fixes to apply:
# 1. Remove Se in self.servcall()
# 2. Add the following in class def
#    @property
#    def Se(self):
#        dae = self.system.DAE
#        vfout = dae.x[self.vfout]
#        return mul(self.Ae, exp(mul(self.Be, abs(vfout))))
#
#    @property
#    def dSe(self):
#        dae = self.system.DAE
#        vfout = dae.x[self.vfout]
#        return mul(self.Ae, exp(mul(self.Be, abs(vfout)))) + \
#               mul(self.Ae, self.Be, abs(vfout), exp(mul(self.Be, abs(vfout))))
# 3. Modify the Fx0 line with self.Se to self.dSe and put it in fxcall
# 4. Modify self.calls['fxcall'] to True
