# ANDES card file, 1.0

# field = elements
# an element can be a dictionary denoted with colon
# multiple elements: separate with semi-colon
# multiple lines supported

name = WTG3

doc_string = Wind turbine type III

group = WTG

data =
 bus: 0;
 gen: 0;
 wind: 0;
 Kp: 10; nblade: 3;
 ngen: 40; npole: 4;
 R: 35; Tp: 3.0;
 ngb: 0.011235;
 H: 2;
 rr: 0.01; rs: 0.01;
 xr: 0.08; xs: 0.1;
 xmu: 3; Te: 0.01;
 KV: 10;
 pmax: 1.0; pmin: 0;
 qmax: 0.6; qmin: -0.6;
 gammap: 1; gammaq: 1;
 u: 1; Sn: 40;
 Ts: 1;

descr =
 bus: Bus idx
 gen: Static generator idx;
 wind: Wind time series idx;
 Kp: Pitch control gain;
 nblade: Number of blades;
 ngen: Number of generators;
 npole: Number of poles;
 R: Rotor radius;
 Tp: Pitch control time constant;
 ngb: Gear box ratio;
 H: Machine rotor and turbine inertia constant;
 rr: Rotor resistance;
 rs: Stator resistance;
 xr: Rotor reactance;
 xs: Stator reactance;
 xmu: Magnetizing reactance;
 Te: Power control time constant;
 Ts: Speed control time constant;
 KV: Voltage control gain;
 pmax: Maximum active power;
 pmin: Minimum reactive power;
 qmax: Maximum active power;
 qmin: Minimum reactive power;
 gammap: Active power generation ratio;
 gammaq: Reactive power generation ratio;

units =
 Kp: pu;
 R: m; Tp: s;
 H: MWs/MVA;
 rr: pu; rs: pu;
 xr: pu; xs: pu;
 xmu: pu; Te: s;
 KV: pu;
 pmax: pu; pmin: pu;
 qmax: pu; qmin: pu

params =
 Kp; nblade; ngen; npole; R; Tp; Ts; ngb; H;
 rr; rs; xr; xs; xmu; Te; KV;
 pmax; pmin; qmax; qmin; gammap; gammaq

mandatory = bus; gen; wind

times = Tp; Te

ac = bus: a, v
# zeros = T6

z = rs; xs; rr; xr; xmu
powers = H; pmax; pmin; qmax; qmin

ctrl =
 ugen: StaticGen, u, gen, c;
 p0: Bus, Pg, bus, c;
 q0: Bus, Qg, bus, c;
 vw: Wind, vw, wind, x;
 rho: Wind, rho, wind, c;
 Vwn: Wind, Vwn, wind, c;

algebs = isd; isq; vrd; vrq; vsd; vsq; vref; pwa; pw; cp; lamb; ilamb
fnamey = I_{s, d}; I_{s, q}; V_{r, d}; V_{r, q}; V_{s, d}; V_{s, q}; V_{ref}; P_{\omega a}; P_w; c_p; \lambda; \frac{1}{\lambda}; \omega_{ref}

states = theta_p; omega_m; ird; irq;
fnamex = \theta_p; \omega_m; I_{r, d}; I_{r, q};

interfaces = a; v

service_eq =
 vref0: v;
 x0: xs + xmu;
 x1: xr + xmu;
 pi: 3.14;
 phi: 0.1;
 u0: u * ugen;
 fn: 60;
 mva_mega : 1e8;
 ird_min: 0;
 ird_max: 999;
 irq_min: 0;
 irq_max: 999;
 irq_off: 0;


init1_eq =


algeb_eq =
 -rs * isd + (x0*isq + xmu*irq) - vsd;
 -rs * isq - (x0*isd + xmu*ird) - vsq;
 -rr*ird + (1 - omega_m)*(x1*irq + xmu*isq) - vrd;
 -rr*irq - (1 - omega_m)*(x1*ird + xmu*isd) - vrq;
 -v*sin(a) - vsd;
 v*cos(a) - vsq;
 vref0 - vref;
 2*omega_m - 1 - pwa;
 0.5 * ngen * rho * cp * (pi * R **2) * (vw*Vwn) ** 3 / mva_mega - pw;
 0.22 * (116 / ilamb - 0.4 * theta_p - 5) * exp(-12.5 / ilamb) - cp;
 4 * pi * fn * R * ngb * omega_m / Vwn / vw / npole - lamb;
 (1/(1/(lamb + 0.08 * theta_p) - 0.035/(theta_p ** 3 + 1))) - ilamb;
 u0 * (-vsd * isd - vsq * isq - vrd * ird - vrq * irq);
 u0 * (v**2/x0 + v*xmu*ird/x0);

hard_limit =
 pwa: 0, 1;

diff_eq =
 Kp * phi *(omega_m - 1);
 (pw/omega_m + (xmu * v * irq / x0)) / (2 * H);
 KV * (v - vref) - v/xmu;
 - x0 * pwa / v / xmu / omega_m - irq_off;

anti_windup =
 theta_p: Tp, 0, pi;
 irq: Te, irq_min, irq_max
 ird: Ts, ird_min, irq_max

# 1. Delete self.pi in self.servcall(self, dae); replace all self.pi with pi;
# 2. Delete self.phi from self._service