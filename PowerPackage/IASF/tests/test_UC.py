
import pandas as pd

## Import the studied system data using matpower/pypower format
## Read IEEE 39 bus system data
from IASF.cases.ieee_39bus import *
from IASF.cases.index import *
from IASF.src.scheduling import SchedulingProblem
from IASF.src.utils import SolutionDict
pppc = case39()


## Get the ISO level time-series data
## This data set should be generated by modules developed by BNL
## read ISO level load data
## index for reading load data from pandas data frame
LoadData=pd.read_csv('P_Load.csv')  # pandas dataframe
PL = list(LoadData.iloc[:, 1])  # normal, type: series


## ISO level spinning reserve requirement
ReserveData=pd.read_csv('P_Reserve.csv')  # pandas dataframe
RV = list(ReserveData.iloc[:, 1])  # normal, type: series





## define an instance of a UC problem class
u = SchedulingProblem('00:00', '24:00', 60, 'UC')

## prepare data
u.get_network_data(pppc, idx_matpower)
u.get_system_reserve_data(RV)
u.get_system_load_data(PL)
u.set_bus_load(1)
u.convert_cost()

## define UC with DC power flow
u.define_pyomo_model('Concrete')
u.define_problem('DC')
u.solve_problem('glpk', 1)

## plot generator output
gen_power_normal = u.get_solution_2d('Pg', u.iter_gen, u.iter_time)
gen_power_normal.time_series = u.time_series
gen_power_normal.legend_list = u.iter_gen_name
gen_power_normal.x_str = 'Time (h)'
gen_power_normal.y_str = 'Power (MW)'
gen_power_normal.title_str = 'Generator Output'
gen_power_normal.fig_size = (12, 5)
gen_power_normal.plot_step_2d()

## plot bus voltage
voltage_normal = SolutionDict(u.time_series, u.iter_bus_name, 'Time (h)', 'Voltage (PU)', 'Bus Voltage', (12, 5))
voltage_normal = u.get_solution_2d('V', u.iter_bus, u.iter_time, voltage_normal)
voltage_normal.plot_step_2d()

## plot line flow
Pf_normal = SolutionDict(u.time_series, u.iter_line_name, 'Time (h)', 'Active Power Flow (PU)', 'Power Flow', (12, 5))
Qf_normal = SolutionDict(u.time_series, u.iter_line_name, 'Time (h)', 'Reactive Power Flow (PU)', 'Power Flow', (12, 5))
Pf_normal, Qf_normal = u.get_slotuion_flow(u.iter_time, Pf_normal, Qf_normal)
Pf_normal.plot_step_2d()
Qf_normal.plot_step_2d()

# plot generator commitment, which is required by ED
gen_power_status = u.get_solution_2d('status', u.iter_gen, u.iter_time)






## define an economic dispatch problem
ed = SchedulingProblem('00:00', '24:00', 60, 'ED')
ed.dependency = gen_power_status

## prepare data
ed.get_network_data(pppc, idx_matpower)
ed.get_system_reserve_data(RV)
ed.get_system_load_data(PL)
ed.set_bus_load(1)
ed.convert_cost()

## define UC without power flow
ed.define_pyomo_model('Concrete')
ed.define_problem('DC')
ed.solve_problem('glpk', 1)

## plot generator output
gen_power_normal = ed.get_solution_2d('Pg', ed.iter_gen, ed.iter_time)
gen_power_normal.time_series = u.time_series
gen_power_normal.legend_list = ed.iter_gen_name
gen_power_normal.x_str = 'Time (h)'
gen_power_normal.y_str = 'Power (MW)'
gen_power_normal.title_str = 'Generator Output'
gen_power_normal.fig_size = (12, 5)
gen_power_normal.plot_step_2d()

## plot bus voltage
voltage_normal = SolutionDict(u.time_series, ed.iter_bus_name, 'Time (h)', 'Voltage (PU)', 'Bus Voltage', (12, 5))
voltage_normal = ed.get_solution_2d('V', ed.iter_bus, ed.iter_time, voltage_normal)
voltage_normal.plot_step_2d()

## plot bus angle
angle_normal = SolutionDict(u.time_series, ed.iter_bus_name, 'Time (h)', 'Angle (Radian)', 'Bus Voltage', (12, 5))
angle_normal = ed.get_solution_2d('A', ed.iter_bus, ed.iter_time, angle_normal)
angle_normal.plot_step_2d()

## plot line flow
Pf_normal = SolutionDict(u.time_series, ed.iter_line_name, 'Time (h)', 'Active Power Flow (PU)', 'Power Flow', (12, 5))
Qf_normal = SolutionDict(u.time_series, ed.iter_line_name, 'Time (h)', 'Reactive Power Flow (PU)', 'Power Flow', (12, 5))
Pf_normal, Qf_normal = ed.get_slotuion_flow(ed.iter_time, Pf_normal, Qf_normal)
Pf_normal.plot_step_2d()
Qf_normal.plot_step_2d()


# convert to pandas data frame
time_series = pd.DataFrame(ed.time_series)
gen_power_normal_df = pd.DataFrame(gen_power_normal)
voltage_normal_df = pd.DataFrame(voltage_normal)
angle_normal_df = pd.DataFrame(angle_normal)
Pf_normal_df = pd.DataFrame(Pf_normal)

# save data to excel
time_series.to_excel('time_series.xlsx', header=False, index=False)
gen_power_normal_df.to_excel('economic_dispatch.xlsx', header=True, index=False)
voltage_normal_df.to_excel('voltage.xlsx', header=True, index=False)
angle_normal_df.to_excel('angle.xlsx', header=True, index=False)
Pf_normal_df.to_excel('power_flow.xlsx',  header=True,  index=False)

# save data to csv
# gen_power_normal_df.to_csv('economic_dispatch.csv', header=True, index=False)
# Pf_normal_df.to_csv('power_flow.csv',  header=True,  index=False)
