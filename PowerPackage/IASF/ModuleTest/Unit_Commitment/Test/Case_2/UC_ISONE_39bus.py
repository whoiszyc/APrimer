# -*- coding: utf-8 -*-
"""
Created on Mon Jul 23 13:59:34 2018

@author: Yichen Zhang

This module uses the data from matpower/pypower in pypsa.
For the data format, please cross reference between matpower manual and pypsa attributes in cvs.
"""

import pypsa
import pandas as pd
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
font = {'family' : 'Times New Roman',
        'weight' : 'normal',
        'size'   : 20}
matplotlib.rc('font', **font)




"""
Get the ISO level time-series load data from csv
This data set should be generated by modules developed by BNL
"""
# read ISO level load data
LoadData=pd.read_csv('P_Load.csv') # type:data frame
LoadData1=pd.read_csv('P_Load1.csv')
PL_norm=LoadData.iloc[:,1] # normal, type: series
#PL_comp=LoadData1.iloc[:,1] # compromised
H=len(PL_norm)  # scheduling horizon

# plot
plt.figure(figsize=(11,8))
plt.xlabel('time (hour)')
plt.ylabel('power (MW)')
plt.plot(PL_norm,'b',linewidth=4,label='Normal')
#plt.plot(PL_comp,'r--',linewidth=4,label='Attack')
plt.title('Forcasted Load')
plt.legend()
plt.show()





""" 
Import the studied system data using matpower/pypower format
"""
import case_39bus as case 
ppc=case.case39() # dictionary data

# get size of bus, line and generator
number_bus=ppc['bus'].shape[0] # shape returns (row,column)
number_line=ppc['branch'].shape[0]
number_gen=ppc['gen'].shape[0]

# calculate base
base_mva=ppc['baseMVA']     # MVA
base_KV=ppc['baseKV']       # KV
base_KA=base_mva/base_KV    # KA
base_Ohm=base_KV/base_KA    # Ohm
base_Siemens=1/base_Ohm     # Siemens





"""
Load data distribution
The load data (active power) is distributed according the static load data of standard IEEE 39-bus.
For now we are not sure this is the way that we want to perform our attack.
"""

# get static load data from standard IEEE 39-bus system (unit: MW/Mvar)
load_p=ppc['bus'][:,2]
load_q=ppc['bus'][:,3]

# get percentaged active power demand at each bus based on the standard data
load_p_percen=load_p/load_p.sum()

# distribute the time-series active power demand based on the percentage
load_p_series=np.zeros((number_bus,H)); # define array for time-series load
for i in range(number_bus):
    load_p_series[i,:]=load_p_percen[i]*PL_norm

# plot bus demand
plt.figure(figsize=(11,8))
plt.xlabel('time (hour)')
plt.ylabel('power (MW)')
for i in range (number_bus):
    plt.plot(load_p_series[i,:],linewidth=4)
plt.title('Forcasted load at each bus')
plt.legend()
plt.show()





"""
Convert matrxi-based data structure of matpower/pypower format to object-based pypsa format
"""
# build network object
nu = pypsa.Network()

# scheduling horizon
nu.set_snapshots(range(H))

# create buses
# add(class name, customized name,...)
for i in range(number_bus):
    nu.add("Bus","Bus {}".format(ppc['bus'][i,0])) # {} is to get the input of format method
print(nu.buses)

# create lines
for i in range(number_line):
    nu.add("Line","Line: {}-{}".format(ppc['branch'][i,0],ppc['branch'][i,1]),
           bus0="Bus {}".format(ppc['branch'][i,0]), # use the same name when defining the bus
           bus1="Bus {}".format(ppc['branch'][i,1]),
           r=ppc['branch'][i,2]*base_Ohm, # Ohm in PyPsa, p.u. in PyPower
           x=ppc['branch'][i,3]*base_Ohm,
           b=ppc['branch'][i,4]*base_Siemens, # Siemens in PyPsa, p.u. in PyPower
#           s_nom=ppc['branch'][i,7]  # MVA, set to the rating C of matpower (emergency rating)
           )    
print(nu.lines)

# create generators
# get generator types: PQ, PV, slack from bus data array
gen_type_index=ppc['bus'][:,1]
gen_PV_index=np.where(gen_type_index==2) # tuple data
gen_slack_index=np.where(gen_type_index==3)

for i in range(number_gen):
    #check the type of generator
    if ppc['gen'][i,0] in gen_PV_index[0]:
        current_type="PV"
    elif ppc['gen'][i,0] in gen_slack_index[0]:
        current_type="Slack"
    else:
        current_type="PQ"
    
    # add generator
    nu.add("Generator","Generator {}".format(ppc['gen'][i,0]),
           bus="Bus {}".format(ppc['gen'][i,0]),
           p_nom=base_mva, # MW in both PyPsa and PyPower
           p_max_pu=ppc['gen'][i,8]/base_mva,  # p.u. in PyPsa, MW in PyPower
           p_min_pu=ppc['gen'][i,9]/base_mva,  # p.u. in PyPsa, MW in PyPower
#           p_set=ppc['gen'][i,1], # for initial power flow
#           q_set=ppc['gen'][i,2],
           committable=True,
           start_up_cost=ppc['gencost'][i,1], # $
           shut_down_cost=ppc['gencost'][i,2],
           marginal_cost=50,
           control=current_type
           )
print(nu.generators)

# create loads
for i in range(number_bus):
    nu.add("Load","Load {}".format(ppc['bus'][i,0]),
           bus="Bus {}".format(ppc['bus'][i,0]),
           p_set=load_p_series[i,:], # MW
           q_set=load_q[i] # MVar
    )

# solve linear optimal power flow
nu.lopf(nu.snapshots,solver_name="glpk")





"""
show results
"""
# show in console
print(nu.generators_t.status)
print(nu.generators_t.p)

# plot 
plt.figure(figsize=(11,8))
plt.xlabel('time (hour)')
plt.ylabel('power (MW)')
for i in range(number_gen):
    plt.plot(nu.generators_t.p.iloc[:,i],label='Gen {}'.format(i),linewidth=4)
plt.title('Generator Scheduling')
plt.legend()
plt.show()


#plt.figure(figsize=(11,8))
#plt.subplot(211)
##plt.xlabel('time (hour)')
#plt.ylabel('power (MW)')
#plt.step(nu.generators_t.p.iloc[:,0],'b',label='Coal',linewidth=4)
#plt.step(nu.generators_t.p.iloc[:,1],'r',label='Gas',linewidth=4,linestyle='--')
#plt.title('Unit Commitment Under Normal Condition')
#plt.legend()
#plt.show()
#plt.subplot(212)
#plt.xlabel('time (hour)')
#plt.ylabel('power (MW)')
#plt.step(nu1.generators_t.p.iloc[:,0],'b',label='Coal',linewidth=4)
#plt.step(nu1.generators_t.p.iloc[:,1],'r',label='Gas',linewidth=4,linestyle='--')
#plt.title('Unit Commitment Under Attack')
#plt.subplots_adjust(top=0.92, bottom=0.08, left=0.10, right=0.95, hspace=0.25,wspace=0.35)
#plt.legend()
#plt.show()