import numpy as np
import pandas as pd
import sympy as sy
import matplotlib
import matplotlib.pyplot as plt
from pyomo.environ import *

import Func_IEEETestCase
import Func_UC
import Func_ED


# Setting for plot
font = {'family' : 'Times New Roman',
        'weight' : 'normal',
        'size'   : 12}
matplotlib.rc('font', **font)



""" 
Import the studied system data using matpower/pypower format
"""
# Read IEEE 39 bus system data
ppc=Func_IEEETestCase.case39() # dictionary data


"""
Get the ISO level time-series data
This data set should be generated by modules developed by BNL
"""
# read ISO level load data
# index for reading load data from pandas data frame

LoadData=pd.read_csv('P_Load.csv')  # pandas dataframe
PL = LoadData.iloc[:, 1]  # normal, type: series

# ISO level spinning reserve requirement
ReserveData=pd.read_csv('P_Reserve.csv')  # pandas dataframe
RV = ReserveData.iloc[:, 1]  # normal, type: series



"""
Solve unit commitment problem
"""
problem_data, model = Func_UC.UC_FlowFree(ppc, PL, RV, "glpk")

"""
 Export data (Pyomo book 173)
 """
gen_power_normal = {}  # create an empty dictionary
for i in problem_data["iter_gen"]:
    gen_power_normal[i] = []  # create an empty list
    for h in problem_data["iter_hour"]:
        gen_power_normal[i].append(value(model.Pg[i, h]))

gen_status_normal = {}  # create an empty dictionary
for i in problem_data["iter_gen"]:
    gen_status_normal[i] = []  # create an empty list
    for h in problem_data["iter_hour"]:
        gen_status_normal[i].append(value(model.status[i, h]))


"""
Solve economic dispatch problem with fixed generator status
"""
cost_LoadShedding=1000000
problem_data_1, model_1 = Func_ED.ED_FlowFree_StatusFix(ppc, PL, RV, gen_status_normal, cost_LoadShedding, "glpk")

# compare cost
value(model.obj_cost)-value(model_1.obj_cost)




"""
Plot
"""
# # plot
# plt.figure(figsize=(12,5))
# plt.xlabel('time (hour)')
# plt.ylabel('power (MW)')
# plt.plot(PL_norm,'b',linewidth=3,label='Normal')
# plt.plot(PL_at,'r',linestyle="--",linewidth=3,label='Attack')
# plt.title('Forcasted Load')
# plt.legend()
# plt.show()


# Plot: 2D
plt.figure(figsize=(12,5))
plt.xlabel('time (hour)')
plt.ylabel('power (MW)')
for i in range(problem_data["number_gen"]):
    plt.step(problem_data["iter_hour"], gen_power_normal[i], label='Gen {}'.format(int(ppc["gen"][i, 0])), linewidth=3)
plt.title('UC under Normal Case')
plt.legend(bbox_to_anchor=(1, 1), loc=2, borderaxespad=0.5)
plt.show()


# # Plot: 3D
# fig = plt.figure(figsize=(12,5))
# ax = fig.add_subplot(111, projection='3d')
# for i in iter_gen:
#     xs = iter_hour
#     ys = gen_power_normal[i]
#     ax.bar(xs, ys, zs=int(ppc["gen"][i,0]), zdir='y', alpha=0.7, label='Gen {}'.format(int(ppc["gen"][i,0])))
# ax.set_xlabel('Hours')
# ax.set_ylabel('Generator Index')
# ax.set_zlabel('Power')
# plt.legend(bbox_to_anchor=(1, 1), loc=2, borderaxespad=0.5)
# plt.show()
# plt.title('UC under Normal Case')
#
# # Plot: 3D
# fig = plt.figure(figsize=(12,5))
# ax = fig.add_subplot(111, projection='3d')
# for i in iter_gen:
#     xs = iter_hour
#     ys = gen_power_at[i]
#     ax.bar(xs, ys, zs=int(ppc["gen"][i,0]), zdir='y', alpha=0.7, label='Gen {}'.format(int(ppc["gen"][i,0])))
# ax.set_xlabel('Hours')
# ax.set_ylabel('Generator Index')
# ax.set_zlabel('Power')
# plt.legend(bbox_to_anchor=(1, 1), loc=2, borderaxespad=0.5)
# plt.show()
# plt.title('UC under Cyber Attack')

